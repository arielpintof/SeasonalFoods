@page "/section"
@using SeasonalFoods.Pages
@using SeasonalFoods.Enums
@using System.Globalization
@using System.Net
@using SeasonalFoods.Dto
@using System.Text
@inject HttpClient Http

<section class="d-flex gap-3 @Class align-items-center">
    <div class="image-container">
        <img class="rounded" alt="avatar1" src="@GetImagePath(FoodName)"/>
    </div>
    
    <div class="d-flex flex-column text-section">
        <h2>@FoodName, @QualityName</h2>
        <span>@RegionName</span>
    </div>
</section>


@code {

    [Parameter]
    public string Class { get; set; } = string.Empty;
    
    [Parameter]
    public string FoodName { get; set; } = string.Empty;

    [Parameter]
    public int Quality { get; set; }
    
    [Parameter]
    public int Region { get; set; }

    private Dictionary<string, string> imageDictionary { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var imagesList = await Http.GetFromJsonAsync<List<Images>>("/imagenes-alimentos/images.json");
        imageDictionary = imagesList.ToDictionary(image => image.Name.ToLower(), image => image.Url);
    }

    private string GetImagePath(string foodName)
    {
        var fileName = RemoveDiacritics(foodName.ToLower());

        if (imageDictionary != null && imageDictionary.TryGetValue(fileName, out var url))
        {
            return $"/imagenes-alimentos/{url}";
        }
        
        return "/imagenes-alimentos/imagen-no-encontrada.jpg";
    }

    public string RemoveDiacritics(string text)
    {
        var normalizedString = text.Normalize(NormalizationForm.FormD);
        var stringBuilder = new StringBuilder();

        foreach (var c in normalizedString)
        {
            var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(c);
            if (unicodeCategory != UnicodeCategory.NonSpacingMark)
            {
                stringBuilder.Append(c);
            }
        }

        return stringBuilder.ToString().Normalize(NormalizationForm.FormC);
    }

    string RegionName => IEnum<Regions, RegionToken>
        .TokenDictionary()
        .Select(e => e.Value.ReadableName)
        .ElementAt(Region);

    string QualityName => IEnum<Qualities, QualityToken>
        .TokenDictionary()
        .Select(e => e.Value.ReadableName)
        .ElementAt(Quality);
}

<style>
    .text-section h2{
        font-weight: bold;
        color: var(--grey-normal);
        font-family: 'Plus Jakarta Sans', sans-serif;
    }
    .text-section span{
        font-weight: bold;
        color: var(--grey-light);
    }
    .image-container {
        width: 56px;
        height: 56px;
        overflow: hidden;
    }
    
    .image-container img {
        width: 100%;
        height: 100%;
        object-fit: cover; /* Puedes ajustar 'cover' según tus necesidades */
    }
</style>