@using SeasonalFoods.Enums
@using System.Text
@using System.Globalization
@using System.Net
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="food-container" @onclick="NavigateToFood">
    <div class="d-flex flex-row py-4 pr-10">
        <div class="d-flex justify-space-between flex-grow-1">
            <div class="d-flex flex-row gap-3">
                <div class="image-container ml-3">
                    <img class="rounded" alt="@GetImagePath(Name)" src="@GetImagePath(Name)"/>
                </div>
                <div class="d-flex flex-column gap-1">
                    <div class="d-flex gap-1">
                        <strong>@Name </strong>
                        <strong class="grey-color">@Variety</strong>
                    </div>
                    <div class="d-flex gap-1">
                        <span class="grey-color bi bi-calendar2"
                              style="font-size: 14px !important;">
                            @ShopPlace
                        </span>
                        <span class="grey-color bi bi-geo-alt"
                              style="font-size: 14px !important;">
                            @Region
                        </span>
                    </div>
                </div>

            </div>
            <div class="d-flex flex-row gap-1 align-items-center">
                <span class="price-font fw-bold">@Convert.ToInt32(Price)</span>
                <span>@Unit</span>
            </div>

        </div>
    </div>
    
    
</div>


@code {

    [Parameter]
    public string Name { get; set; } = string.Empty;

    [Parameter]
    public string Image { get; set; } = string.Empty;

    [Parameter]
    public string Variety { get; set; } = string.Empty;

    [Parameter]
    public string LastUpdate { get; set; } = string.Empty;

    [Parameter]
    public string Region { get; set; } = string.Empty;

    [Parameter]
    public string Quality { get; set; } = string.Empty;

    [Parameter]
    public string ShopPlace { get; set; } = string.Empty;

    [Parameter]
    public string Unit { get; set; } = string.Empty;

    [Parameter]
    public decimal Price { get; set; }

    [Parameter]
    public bool Hovered { get; set; }

    int QualityInt => IEnum<Qualities, QualityToken>.FromReadableName(Quality).Value;

    int RegionInt => IEnum<Regions, RegionToken>.FromReadableName(Region).Value;

    private void NavigateToFood()
    {
        NavigationManager.NavigateTo($"/alimentos/{Name}/{QualityInt}/{RegionInt}");
    }

    private Dictionary<string, string> imageDictionary { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var imagesList = await Http.GetFromJsonAsync<List<Images>>("/imagenes-alimentos/images.json");
        imageDictionary = imagesList.ToDictionary(image => image.Name.ToLower(), image => image.Url);
    }

    private string GetImagePath(string foodName)
    {
        var fileName = RemoveDiacritics(foodName.ToLower());

        if (imageDictionary != null && imageDictionary.TryGetValue(fileName, out var url))
        {
            return $"/imagenes-alimentos/{url}";
        }

        // Si no se encuentra la imagen, puedes manejarlo de acuerdo a tus necesidades
        return "/imagenes-alimentos/imagen-no-encontrada.jpg";
    }

    public string RemoveDiacritics(string text)
    {
        var normalizedString = text.Normalize(NormalizationForm.FormD);
        var stringBuilder = new StringBuilder();

        foreach (var c in normalizedString)
        {
            var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(c);
            if (unicodeCategory != UnicodeCategory.NonSpacingMark)
            {
                stringBuilder.Append(c);
            }
        }

        return stringBuilder.ToString().Normalize(NormalizationForm.FormC);
    }

    public class Images
    {
        public string Name { get; set; }
        public string Url { get; set; }
    }
}